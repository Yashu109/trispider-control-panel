// // AdminPanel.jsx
// import { useState, useEffect } from 'react';
// import { database, auth } from '../../firebase';
// import { ref, set, get, onValue } from 'firebase/database';
// import { useNavigate } from 'react-router-dom';
// import './AdminPanel.css';

// const AdminPanel = () => {
//     const navigate = useNavigate();
//     const [projectData, setProjectData] = useState({
//         title: '',
//         description: '',
//         scopeOfWork: '',
//         timestamp: ''
//     });
//     const [projects, setProjects] = useState([]);
//     const [isLoading, setIsLoading] = useState(false);
//     const [message, setMessage] = useState('');
//     const [editingId, setEditingId] = useState(null);

//         useEffect(() => {
//         const unsubscribeAuth = auth.onAuthStateChanged((user) => {
//             if (!user) {
//                 navigate('/');
//                 return;
//             }

//             // Set up realtime listener for projects
//             const projectsRef = ref(database, 'projects');
//             const unsubscribeDB = onValue(projectsRef, (snapshot) => {
//                 const data = snapshot.val();
//                 if (data) {
//                     const projectsList = Object.entries(data).map(([id, values]) => ({
//                         id,
//                         ...values
//                     }));
//                     setProjects(projectsList.sort((a, b) => b.timestamp - a.timestamp));
//                 } else {
//                     setProjects([]);
//                 }
//             });

//             return () => unsubscribeDB();
//         });

//         return () => unsubscribeAuth();
//     }, [navigate]);

//     const generateProjectId = async () => {
//         const counterRef = ref(database, 'projectCounter');
        
//         try {
//             const snapshot = await get(counterRef);
//             let counter = 5000; // Starting number
            
//             if (snapshot.exists()) {
//                 counter = snapshot.val() + 1;
//             }
            
//             // Update counter in database
//             await set(counterRef, counter);
            
//             // Format: INDKAR5000, INDKAR5001, etc.
//             return `INDKAR${counter}`;
//         } catch (error) {
//             console.error('Error generating project ID:', error);
//             throw error;
//         }
//     };

//     const handleChange = (e) => {
//         const { name, value } = e.target;
//         setProjectData(prevState => ({
//             ...prevState,
//             [name]: value
//         }));
//     };

//     const resetForm = () => {
//         setProjectData({
//             title: '',
//             description: '',
//             scopeOfWork: '',
//             timestamp: ''
//         });
//         setEditingId(null);
//     };

//     const handleSubmit = async (e) => {
//         e.preventDefault();
//         setIsLoading(true);
//         setMessage('');

//         try {
//             let projectId;
//             if (editingId) {
//                 projectId = editingId;
//             } else {
//                 projectId = await generateProjectId();
//             }

//             const projectRef = ref(database, `projects/${projectId}`);
//             const timestamp = Date.now();
//             const projectWithTimestamp = {
//                 ...projectData,
//                 timestamp,
//                 projectId // Store the ID in the project data as well
//             };

//             await set(projectRef, projectWithTimestamp);
            
//             setMessage(editingId ? 'Project updated successfully!' : 'Project added successfully!');
//             resetForm();
//         } catch (error) {
//             setMessage('Error saving project. Please try again.');
//             console.error('Error:', error);
//         } finally {
//             setIsLoading(false);
//         }
//     };

//     const handleEdit = (project) => {
//         setProjectData({
//             title: project.title,
//             description: project.description,
//             scopeOfWork: project.scopeOfWork,
//             timestamp: project.timestamp
//         });
//         setEditingId(project.id);
//     };

//     const handleDelete = async (projectId) => {
//         if (window.confirm('Are you sure you want to delete this project?')) {
//             try {
//                 await set(ref(database, `projects/${projectId}`), null);
//                 setMessage('Project deleted successfully!');
//             } catch (error) {
//                 setMessage('Error deleting project. Please try again.');
//                 console.error('Error:', error);
//             }
//         }
//     };

//     const handleSignOut = async () => {
//         try {
//             await auth.signOut();
//             navigate('/');
//         } catch (error) {
//             console.error('Error signing out:', error);
//         }
//     };

//     return (
//         <div className="admin-container">
//             <div className="admin-header">
//                 <h1>Admin Panel</h1>
//                 <p>{editingId ? 'Edit Project' : 'Add New Project'}</p>
//                 <button onClick={handleSignOut} className="sign-out-button">
//                     Sign Out
//                 </button>
//             </div>

//             <form onSubmit={handleSubmit} className="project-form">
//                 <div className="form-group">
//                     <label htmlFor="title">Project Title</label>
//                     <input
//                         type="text"
//                         id="title"
//                         name="title"
//                         value={projectData.title}
//                         onChange={handleChange}
//                         required
//                         placeholder="Enter project title"
//                     />
//                 </div>

//                 <div className="form-group">
//                     <label htmlFor="description">Project Description</label>
//                     <textarea
//                         id="description"
//                         name="description"
//                         value={projectData.description}
//                         onChange={handleChange}
//                         required
//                         placeholder="Enter project description"
//                         rows="4"
//                     />
//                 </div>

//                 <div className="form-group">
//                     <label htmlFor="scopeOfWork">Scope of Work</label>
//                     <textarea
//                         id="scopeOfWork"
//                         name="scopeOfWork"
//                         value={projectData.scopeOfWork}
//                         onChange={handleChange}
//                         required
//                         placeholder="Enter scope of work"
//                         rows="6"
//                     />
//                 </div>

//                 {message && (
//                     <div className={`message ${message.includes('Error') ? 'error' : 'success'}`}>
//                         {message}
//                     </div>
//                 )}

//                 <div className="button-group">
//                     <button 
//                         type="submit" 
//                         className="submit-button"
//                         disabled={isLoading}
//                     >
//                         {isLoading ? 'Saving...' : (editingId ? 'Update Project' : 'Add Project')}
//                     </button>

//                     {editingId && (
//                         <button 
//                             type="button" 
//                             className="cancel-button"
//                             onClick={resetForm}
//                         >
//                             Cancel Edit
//                         </button>
//                     )}
//                 </div>
//             </form>

//             <div className="projects-list">
//                 <h2>Existing Projects</h2>
//                 {projects.map(project => (
//                     <div key={project.id} className="project-card">
//                         <div className="project-header">
//                             <h3>{project.title}</h3>
//                             <span className="project-id">{project.id}</span>
//                         </div>
//                         <p className="description">{project.description}</p>
//                         <div className="project-actions">
//                             <button 
//                                 onClick={() => handleEdit(project)}
//                                 className="edit-button"
//                             >
//                                 Edit
//                             </button>
//                             <button 
//                                 onClick={() => handleDelete(project.id)}
//                                 className="delete-button"
//                             >
//                                 Delete
//                             </button>
//                         </div>
//                     </div>
//                 ))}
//             </div>
//         </div>
//     );
// };

// export default AdminPanel;